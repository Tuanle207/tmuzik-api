// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tmuzik.Core.Entities;
using Tmuzik.Infrastructure.Data;

namespace Tmuzik.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210826015321_Update_Audio_Genre_Property")]
    partial class Update_Audio_Genre_Property
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("uuid-ossp")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Tmuzik.Core.Entities.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uuid");

                    b.Property<string>("Cover")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Privacy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Album", "TMuzik");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.AlbumItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AudioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("AudioId");

                    b.ToTable("AlbumItem", "TMuzik");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.AlbumSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<int>("Loves")
                        .HasColumnType("integer");

                    b.Property<int>("Plays")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("AlbumSnapshot", "TMuzik");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Cover")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("text");

                    b.Property<int>("Follows")
                        .HasColumnType("integer");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<ArtistPhotos>("Photo")
                        .HasColumnType("jsonb");

                    b.Property<int>("Plays")
                        .HasColumnType("integer");

                    b.Property<string>("TwitterUrl")
                        .HasColumnType("text");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.Property<string>("YoutubeUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Artist", "TMuzik");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.ArtistSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uuid");

                    b.Property<int>("Loves")
                        .HasColumnType("integer");

                    b.Property<int>("Plays")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("ArtistSnapshot", "TMuzik");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.Audio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ArtistId")
                        .HasColumnType("uuid");

                    b.Property<string>("Artists")
                        .HasColumnType("text");

                    b.Property<string>("Cover")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("File")
                        .HasColumnType("text");

                    b.Property<bool>("FromArtist")
                        .HasColumnType("boolean");

                    b.Property<string>("Genre")
                        .HasColumnType("text");

                    b.Property<int>("Length")
                        .HasColumnType("integer");

                    b.Property<int>("Loves")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Plays")
                        .HasColumnType("integer");

                    b.Property<string>("Privacy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Audio", "TMuzik");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.AudioSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AudioId")
                        .HasColumnType("uuid");

                    b.Property<int>("Loves")
                        .HasColumnType("integer");

                    b.Property<int>("Plays")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AudioId");

                    b.ToTable("AudioSnapshot", "TMuzik");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.FavouriteAlbum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CreatorId");

                    b.ToTable("FavouriteAlbum", "TMuzik");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.FavouriteAudio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AudioId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AudioId");

                    b.HasIndex("CreatorId");

                    b.ToTable("FavouriteAudio", "TMuzik");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.FavouritePlaylist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("FavouritePlaylist", "TMuzik");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cover")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Privacy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Playlist", "TMuzik");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.PlaylistItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AudioId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AudioId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("PlaylistItem", "TMuzik");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.SharedAlbum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GrantedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GrantedId");

                    b.ToTable("SharedAlbum", "TMuzik");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.SharedAudio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AudioId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GrantedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AudioId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GrantedId");

                    b.ToTable("SharedAudio", "TMuzik");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.SharedPlaylist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GrantedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GrantedId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("SharedPlaylist", "TMuzik");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastPasswordUpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastUpdationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("LastUpdator")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("RefreshPasswordCode")
                        .HasColumnType("text");

                    b.Property<long>("RefreshPasswordCodeExpiredAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("User", "Identity");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.UserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", "Identity");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Cover")
                        .HasColumnType("text");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsArtist")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfile", "TMuzik");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.Album", b =>
                {
                    b.HasOne("Tmuzik.Core.Entities.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmuzik.Core.Entities.UserProfile", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.AlbumItem", b =>
                {
                    b.HasOne("Tmuzik.Core.Entities.Album", null)
                        .WithMany("Items")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmuzik.Core.Entities.Audio", "Audio")
                        .WithMany()
                        .HasForeignKey("AudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audio");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.AlbumSnapshot", b =>
                {
                    b.HasOne("Tmuzik.Core.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.Artist", b =>
                {
                    b.HasOne("Tmuzik.Core.Entities.UserProfile", "BelongsTo")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BelongsTo");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.ArtistSnapshot", b =>
                {
                    b.HasOne("Tmuzik.Core.Entities.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.Audio", b =>
                {
                    b.HasOne("Tmuzik.Core.Entities.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId");

                    b.HasOne("Tmuzik.Core.Entities.UserProfile", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.AudioSnapshot", b =>
                {
                    b.HasOne("Tmuzik.Core.Entities.Audio", "Audio")
                        .WithMany()
                        .HasForeignKey("AudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audio");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.FavouriteAlbum", b =>
                {
                    b.HasOne("Tmuzik.Core.Entities.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmuzik.Core.Entities.UserProfile", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.FavouriteAudio", b =>
                {
                    b.HasOne("Tmuzik.Core.Entities.Audio", "Audio")
                        .WithMany()
                        .HasForeignKey("AudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmuzik.Core.Entities.UserProfile", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audio");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.FavouritePlaylist", b =>
                {
                    b.HasOne("Tmuzik.Core.Entities.UserProfile", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmuzik.Core.Entities.Playlist", "Playlist")
                        .WithMany()
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.Playlist", b =>
                {
                    b.HasOne("Tmuzik.Core.Entities.UserProfile", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.PlaylistItem", b =>
                {
                    b.HasOne("Tmuzik.Core.Entities.Audio", "Audio")
                        .WithMany()
                        .HasForeignKey("AudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmuzik.Core.Entities.Playlist", null)
                        .WithMany("Items")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audio");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.SharedAlbum", b =>
                {
                    b.HasOne("Tmuzik.Core.Entities.Album", null)
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmuzik.Core.Entities.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmuzik.Core.Entities.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("GrantedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.SharedAudio", b =>
                {
                    b.HasOne("Tmuzik.Core.Entities.Audio", null)
                        .WithMany()
                        .HasForeignKey("AudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmuzik.Core.Entities.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmuzik.Core.Entities.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("GrantedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.SharedPlaylist", b =>
                {
                    b.HasOne("Tmuzik.Core.Entities.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmuzik.Core.Entities.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("GrantedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmuzik.Core.Entities.Playlist", null)
                        .WithMany()
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.UserLogin", b =>
                {
                    b.HasOne("Tmuzik.Core.Entities.User", null)
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.UserProfile", b =>
                {
                    b.HasOne("Tmuzik.Core.Entities.User", null)
                        .WithOne("Profile")
                        .HasForeignKey("Tmuzik.Core.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.Album", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.Playlist", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Tmuzik.Core.Entities.User", b =>
                {
                    b.Navigation("Profile");

                    b.Navigation("UserLogins");
                });
#pragma warning restore 612, 618
        }
    }
}
